           CONTACT MANAGEMENT SYSTEM
          -----------------------------

          1 Create a new project - ng new contactsApp
          2 Run the new project - ng serve --open
          3 clear the code in app.component.html
          4 install third party libraries like, bootstrap, fontawesome, google fonts

            -> Install Bootstrap - npm i bootstrap
            -> Configure bootstrap -
            in angular.json
            "styles": [
              "src/styles.css",
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
            ]

             "scripts": [
              "node_modules/bootstrap/dist/js/bootstrap.bundle.js"
            ]

            In index.html -
            <!bootstrap!>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>

  install fontawesome-
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
copy this link to index.html

install googlefonts

create html pages or components
-> Contact manager - view all contacts - ng g c contactManager
->Add contacts - add new contacts - ng g c addcontacts
->View contacts - view particular contact - ng g c viewcontact
->Edit contact - edit specific contact- ng g c editcontact

setup path for each component - routing
    localhost:4200 -> localhost:4200/contactManager
    inside app-routing.module.ts Files
/localhost:4200/contactManager
                  {
                   path:'',redirectTo:'contactManager',pathMatch:'full'
                  },
                  //lisiting all contacts details
                  {
                   path:'contactManager',component:ContactManagerComponent
                  },
           7.<router-outlet></router-outlet>
             -page to view requested components

             Design full pages

             api integration

             To fetch data and display

             -> create a server folder
             -> Inside it , Create a db.json Files
             -> Go to json placeholder -> my json data- content -  edit and paste

             -> create a package.json file - npm init
             Update package.josn as
             ->"start" "json-srver --watch db.json --port 3000"

             -> Install npm i json-server
             -> Run backend - npm start

             Create model
              -> create a model folder in src folder
              -> inside in it , create my contact.ts file and mygruop.ts file

              Asynchronous Resolving

              js                     ts
              Promise               Observable (rxjs = reactive extension javascript) library

              .then()               .subscribe()
              .catch()              .catch()

              display all contact information API  - get
              View all contact information - get
              Update all contact information API - put
              delete all contact information API -delete

              Create services 
              SERVICES - PASS DATA FROM ONE component to another
                         if different components share the same data then we use to create a service

              ng g s service-name -> generate a new service ->  ng g s services/ api (services is a folder)

              To get http methods for api fetching

              import HttpClientmodule in app.module.ts
              import{HttpClientModule} from '@angular/common/http';

              import[
                HttpClientModule
              ]

              Dependency Injection - Data share between two dependent classes
              - It perform inside the constructor - constructor means is a special member function it execute first
              - Syntax of DI 
              constructor(access-specifier variable-name : class-name){}

              ngOninit
                ->It is a lifecycle hook
                -> Starting stage of a component creation

                Data Binding - Data sharing inside a component (ts, html)
                1. One way data binding(ts->html or html to ts)
                  (a) Component to view (ts->html)
                    (a.1) String Interpolation-> {{variable-name}} (inside in html)
                    (a.2) Property binding - [attribute-name] = "property-name"
                  (b) view to component (html to ts)

                    (1)Event binding - (event-name)="function-name"
                    (b.1) Event binding - Events are things that happen to HTML elements. (Actions)
                      eg : Onclick, Onchange
                2. Event binding using $event
                -> $event is used in function argument
                  (event-name)="function-name($event) (html)

                -> function-name(event) (ts)
              3. Two way data binding - html to Ts and Ts to html
                  -> ngmodel - [(ngmodel)]="property-name.module.ts - FormsModule
                    ngModel imports in app 
                  Creates a formcontrol instance from a domain model 
                  and binds it to a form control element.
                  -> add this into input tag also put name attribute in it
                


              Directives - To manipulate DOM
                (1) Component Directives
                (2) Structural Directives
                        ngIf="condition"
                        ngFor="let var-name of array-name"

              ActivatedRoutes (class)
              Provides access to information about a route associated with a component that is loaded in an outlet. 
              Use to traverse the RouterState tree and extract information from nodes.

              -> Parameters
                - params : An observable of the matrix parameters scopped to this route.

             Transforming data using pipes
              -> Pipes are simple functions to use in template expressions to accept an input value and return a transformed value. 
               ->Angular provides built-in pipes for typical data transformations,
                including transformations for internationalization (i18n), which use locale information to format data  

            -> Create a pipe - ng g p pipes/filter (pipes - folder name)



             
    
